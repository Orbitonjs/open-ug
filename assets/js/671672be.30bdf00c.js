"use strict";(self.webpackChunkdocumetations=self.webpackChunkdocumetations||[]).push([[8679],{6668:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"how-to-create-a-responsive-custom-video-player-in-react","metadata":{"permalink":"/open-ug/blog/how-to-create-a-responsive-custom-video-player-in-react","source":"@site/blog/2024-05-04-player.md","title":"How to create a responsive custom video player in React","description":"How to create a responsive custom video player in React","date":"2024-05-04T00:00:00.000Z","tags":[{"label":"video-player","permalink":"/open-ug/blog/tags/video-player"},{"label":"reactjs-media","permalink":"/open-ug/blog/tags/reactjs-media"},{"label":"react","permalink":"/open-ug/blog/tags/react"}],"readingTime":3.21,"hasTruncateMarker":true,"authors":[{"name":"Beingana Jim Junior","title":"Open UG Team","url":"https://github.com/jim-junior","image_url":"https://avatars.githubusercontent.com/u/69729988?v=4","imageURL":"https://avatars.githubusercontent.com/u/69729988?v=4"}],"frontMatter":{"slug":"how-to-create-a-responsive-custom-video-player-in-react","title":"How to create a responsive custom video player in React","authors":{"name":"Beingana Jim Junior","title":"Open UG Team","url":"https://github.com/jim-junior","image_url":"https://avatars.githubusercontent.com/u/69729988?v=4","imageURL":"https://avatars.githubusercontent.com/u/69729988?v=4"},"tags":["video-player","reactjs-media","react"]},"unlisted":false,"nextItem":{"title":"How to create Mobile Money Payments in Python in Uganda","permalink":"/open-ug/blog/making-mobile-money-payments-in-python"}},"content":"![How to create a responsive custom video player in React](./rmjsbanner.png)\\n\\n\\nVideo players are essential for applications that showcase video content. While the default HTML5 player offers basic functionalities like play, pause, and volume control, its appearance can vary significantly across browsers and devices.  This inconsistency can be a drawback for a polished user experience.\\n\\nIn this article, we\'ll guide you through creating a responsive custom video player using a library I built called `reactjs-media`. This approach lets you avoid the limitations of the default HTML5 player and the complexity of building a video player from scratch. The reactjs-media library provides more react approach to building your custom player with a wide range of features and customization options.\\n\\n\x3c!--truncate--\x3e\\n\\n## Getting started\\n\\nBefore we dive into building our custom video player, I assume your already have a React project set up. If not, you can create a new React project using Create React App or Vite or any of your preferred React setup.\\n\\nWe shall then go ahead and install the reactjs-media library using npm or yarn.\\n\\n```bash\\nnpm install reactjs-media\\n```\\n\\nor\\n\\n```bash\\nyarn add reactjs-media\\n```\\n\\n## Creating a custom video player\\n\\nTo create a Video player we shall start with the default player provided by the library(Which is Awesome too).\\n\\nAll you have to do is import the `Video` component from `reactjs-media` \\n\\n```jsx\\nimport { Video } from \\"reactjs-media\\";\\n\\nconst App = () => {\\n  return (\\n    <div>\\n      <Video\\n        src={\\"/video.mkv\\"}\\n        controls={true}\\n        height={500}\\n        width={800}\\n        poster={\\n          \\"https://hips.hearstapps.com/hmg-prod/images/ripley-pa-108-011822-01629-r-661067043d66f.jpg?resize=980:*\\"\\n        }\\n      />\\n    </div>\\n  );\\n};\\n```\\n\\n**And Voila!** You have a video player in your application.\\n\\nimport {Video} from \'reactjs-media\';\\n\\n<Video \\ncontrols\\nsrc=\\"https://videos.pexels.com/video-files/4524598/4524598-sd_640_360_25fps.mp4\\"\\nposter=\\"https://images.pexels.com/photos/848573/pexels-photo-848573.jpeg?auto=compress&cs=tinysrgb&w=800\\"\\nheight={400}\\n/>\\n\\n## What are the props?\\n\\nThe Video Component accepts a number props that are defined under the `VideoProps` interface(If you use TypeScript in your Projects). These can be both attributes of the player or event handlers.\\n\\nWe shall start with the basics:\\n\\n- `src`: The source of the video file.\\n- `controls`: A boolean value to show or hide the video controls. It defaults to `false`\\n- `height`: The height of the video player.(This is added as `maxHeight` in the styles)\\n- `width`: The width of the video player.(This is added as `maxWidth` in the styles)\\n- `poster`: The poster image to be displayed before the video starts playing.\\n- `contextMenu`: A boolean value to show or hide the context menu. It defaults to `false`\\n\\n\\n## Handling Events\\n\\nThe Video Component also provides a number of event handlers that you can use to listen to events on the video player.\\n\\n- `onPlay`: This event is fired when the video starts playing.\\n- `onPause`: This event is fired when the video is paused.\\n- `onEnded`: This event is fired when the video has ended.\\n- `onTimeUpdate`: This event is fired when the video is playing and the time is updated.\\n- `onVolumeChange`: This event is fired when the volume of the video is changed.\\n- `onSeeking`: This event is fired when the video is seeking.\\n- `onSeeked`: This event is fired when the video has finished seeking.\\n- `onCanPlay`: This event is fired when the video can be played.\\n\\nExample:\\n\\n```jsx\\n<Video\\n  src={\\"/video.mkv\\"}\\n  controls={true}\\n  height={500}\\n  width={800}\\n  poster={\\n    \\"https://hips.hearstapps.com/hmg-prod/images/ripley-pa-108-011822-01629-r-661067043d66f.jpg?resize=980:*\\"\\n  }\\n  onPlay={() => console.log(\\"Video is playing\\")}\\n  onPause={() => console.log(\\"Video is paused\\")}\\n  onEnded={() => console.log(\\"Video has ended\\")}\\n  onTimeUpdate={(time) => console.log(\\"Time is updated\\", time)}\\n/>\\n\\n```\\n\\n> **Note:** If you want to build a player with your own Completely Custom UI. You can check out the [Building a custom player](https://open.cranom.cloud/reactjs-media/building-custom-player) guide in the `reactjs-media` documentation.\\n\\n\\n## Conclusion\\n\\nIn this article, we have learned how to create a responsive custom video player in React using the `reactjs-media` library. This library provides a set of components and a simple API to create a customizable media player for your application. You can explore more features and customization options by checking out the [`reactjs-media` documentation](https://open.cranom.cloud/reactjs-media/intro).\\n\\n\\n[![DigitalOcean Referral Badge](https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg)](https://www.digitalocean.com/?refcode=ad96e8b378d5&utm_campaign=Referral_Invite&utm_medium=Referral_Program&utm_source=badge)"},{"id":"making-mobile-money-payments-in-python","metadata":{"permalink":"/open-ug/blog/making-mobile-money-payments-in-python","source":"@site/blog/2024-05-03-mobile-money/index.md","title":"How to create Mobile Money Payments in Python in Uganda","description":"How to create Mobile Money Payments in Python in Uganda","date":"2024-05-03T00:00:00.000Z","tags":[{"label":"python","permalink":"/open-ug/blog/tags/python"},{"label":"ugmobilemoney","permalink":"/open-ug/blog/tags/ugmobilemoney"},{"label":"mtn-momo","permalink":"/open-ug/blog/tags/mtn-momo"}],"readingTime":4.065,"hasTruncateMarker":true,"authors":[{"name":"Beingana Jim Junior","title":"Open UG Team","url":"https://github.com/jim-junior","image_url":"https://avatars.githubusercontent.com/u/69729988?v=4","imageURL":"https://avatars.githubusercontent.com/u/69729988?v=4"}],"frontMatter":{"slug":"making-mobile-money-payments-in-python","title":"How to create Mobile Money Payments in Python in Uganda","authors":{"name":"Beingana Jim Junior","title":"Open UG Team","url":"https://github.com/jim-junior","image_url":"https://avatars.githubusercontent.com/u/69729988?v=4","imageURL":"https://avatars.githubusercontent.com/u/69729988?v=4"},"tags":["python","ugmobilemoney","mtn-momo"]},"unlisted":false,"prevItem":{"title":"How to create a responsive custom video player in React","permalink":"/open-ug/blog/how-to-create-a-responsive-custom-video-player-in-react"}},"content":"![How to create Mobile Money Payments in Python in Uganda](./banner.png)\\n\\nIn this article, we will learn how to create Mobile Money Payments in Python in Uganda using different Mobile Money APIs, while utilizing the `ugmobilemoney` library.\\n\\n\x3c!--truncate--\x3e\\n\\n## Introduction\\n\\nMobile Money is a digital payment system that allows users to conduct financial transactions using their mobile phones. It is a popular payment method in Uganda, with the most popular Mobile Money service providers being MTN Mobile Money, Airtel Money, and Africell Money.\\n\\nIn this article, we will focus on creating Mobile Money Payments in Python in Uganda using the `ugmobilemoney` library. This library provides a simple and easy-to-use interface for interacting with different Mobile Money APIs in Uganda.\\n\\nThe `ugmobilemoney` library currently supports a number of Mobile Money APIs in Uganda, including:\\n\\n- MTN Mobile Money API\\n- Airtel Money API\\n- Flutterwave API\\n- Yo Uganda API\\n- Xente API\\n\\nIn this article, we will focus on creating Mobile Money Payments using the MTN Mobile Money API, If you want other APIs, you can check the [`ugmobilemoney` documentation](https://open.cranom.cloud/ugmobilemoney/intro).\\n\\n## Prerequisites\\n\\nBefore we get started, you will need to have the following prerequisites:\\n\\n- Python installed on your machine\\n- An active MTN Mobile Money API key and Subscription Key\\n\\n> If you don\'t have an MTN Mobile Money API key or Subscription Key, you can follow this **Step by Step Guide** to get one: [How to getting Started with MTN MOMO API](https://open.cranom.cloud/ugmobilemoney/mtn-momo/getting-started)\\n\\n## Installing the `ugmobilemoney` library\\n\\nTo get started, you will need to install the `ugmobilemoney` library using `pip`. You can do this by running the following command:\\n\\n```bash\\npip install ugmobilemoney\\n```\\n\\nOnce you have installed the `ugmobilemoney` library, it should be accessible in your Python environment and `mobile_money` module.\\n\\n## Creating Mobile Money Payments\\n\\nAt this point, you should have the `ugmobilemoney` library installed and your MTN Mobile Money API key and Subscription Key ready. Now, let\'s create a simple Mobile Money Payment using the `ugmobilemoney` library.\\n\\nThe MTN MOMO API provides differect services in form of Products. When you want to recieve money from users you use the [**Collections**](https://momodeveloper.mtn.com/product#product=collections) Product.\\n\\nThe `ugmobilemoney` library provides a simple interface to interact with each of the Products. For example if you want to use the Collections Product, you can import the `Collection` class from the `mobile_money.momo` module and use it to create a Mobile Money Payment.\\n\\nHere is an example of how you can create a Mobile Money Payment using the `Collection` class:\\n\\n```python\\nfrom mobile_money.momo import Collection\\nfrom mobile_money import generate_uuid\\n\\ncollection = Collection(\\n    subscription_key=SUBSCRIPTION_KEY,\\n    api_user=API_USER,\\n    api_key=API_KEY,\\n    callback_url=\\"http://mydomain.com/webhooks/mtn/\\",\\n    production=False,\\n)\\n\\ntransaction_reference = generate_uuid()\\n# Request to pay\\nresponse = COLLECTION.collect(\\n    amount=\\"100\\",\\n    phone_number=\\"256772123456\\",\\n    currency=\\"UGX\\",\\n    external_id=\\"external id\\",\\n    reference_id=transaction_reference,\\n    payee_note=\\"test\\",\\n    payer_message=\\"test\\",\\n)\\n\\nprint(response)\\n\\n# >>> <Response [202 Accepted]>\\n```\\n\\nIn this example, we first import the `Collection` class from the `ugmobilemoney.momo` module. We then create an instance of the `Collection` class, passing in the required parameters such as the Subscription Key, API User, API Key, and callback URL.\\n\\nWe then generate a unique transaction reference using the `generate_uuid` function. We then call the `collect` method on the `Collection` instance, passing in the required parameters such as the amount, phone number, currency, external ID, reference ID, payee note, and payer message.\\n\\nThe `collect` method will send a request to the MTN MOMO API to create a Mobile Money Payment. If the request is successful, the method will return a response object with a status code of `202 Accepted`.\\n\\n## Disbursing (Sending) Mobile Money Payments\\n\\nThe MTN MOMO API also provides a service for sending Mobile Money Payments in bulk to different recipients. This service is called Disbursements. You can use the `Disbursement` class from the `mobile_money.momo` module to send Mobile Money Payments using the Disbursements service.\\n\\nHere is an example of how you can send Mobile Money Payments using the `Disbursement` class:\\n\\n```python\\nfrom mobile_money.momo import Disbursement\\n\\ndisbursement = Disbursement(\\n    subscription_key=SUBSCRIPTION_KEY,\\n    api_user=API_USER,\\n    api_key=API_KEY,\\n    callback_url=\\"http://mydomain.com/webhooks/mtn/\\",\\n    production=False,\\n)\\n\\ntransaction_reference = generate_uuid()\\n\\nresponse = disbursement.send(\\n    amount=\\"100\\",\\n    phone_number=\\"256772123456\\",\\n    currency=\\"UGX\\",\\n    external_id=\\"external id\\",\\n    reference_id=transaction_reference,\\n    payee_note=\\"test\\",\\n    payer_message=\\"test\\",\\n)\\n\\nprint(response)\\n\\n# >>> <Response [202 Accepted]>\\n```\\n\\n## Conclusion\\n\\nIn this article, we have learned how to create Mobile Money Payments in Python in Uganda using the `ugmobilemoney` library. We have seen how to create Mobile Money Payments using the MTN Mobile Money API, and how to send Mobile Money Payments using the Disbursements service.\\n\\nThe `ugmobilemoney` library also supports other Payment Providers in Uganda, such as Airtel Money, Flutterwave, Yo Uganda, and Xente, It also tries to fully implement their APIs making it not only limited to mobile money payments but also other services like Airtime Topup, Bill Payments, Card Payments as long as the Service Provider has an API for it that is well documented.\\n\\nYou can learn more about the `ugmobilemoney` library and how to use it by checking out the [documentation](https://open.cranom.cloud/ugmobilemoney/intro). or its Code on [Github](https://github.com/open-ug/ugmobilemoney-py)\\n\\n\\n[![DigitalOcean Referral Badge](https://web-platforms.sfo2.cdn.digitaloceanspaces.com/WWW/Badge%201.svg)](https://www.digitalocean.com/?refcode=ad96e8b378d5&utm_campaign=Referral_Invite&utm_medium=Referral_Program&utm_source=badge)"}]}')}}]);